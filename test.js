const puppeteer=require("puppeteer"),{expect:expect,assert:assert}=require("chai");let URL="http://127.0.0.1:8080/index.html";const HEADLESS=!0,TIMEOUT=12e3;let browser,page,requests=[];function pause(e){return new Promise(t=>{setTimeout(()=>{t("resolved")},e)})}async function getStyles(e){return await page.evaluate(e=>{try{return JSON.parse(JSON.stringify(getComputedStyle(document.querySelector(e))))}catch(e){return null}},e)}function getHTML(e){return page.evaluate(e=>{try{return document.querySelector(e).outerHTML}catch(e){return null}},e)}before(async function(){this.timeout(12e3),browser=await puppeteer.launch({headless:!0,defaultViewport:null,args:["--no-sandbox","--disable-setuid-sandbox"]}),page=await browser.newPage(),await page.setRequestInterception(!0),page.on("console",e=>console.log("PAGE LOG:",e.text())),page.on("request",e=>{requests.push(e.url()),e.continue()}),await page.emulateMedia("screen"),await page.goto(URL,{waitUntil:"networkidle2"})}),describe("Assignment 1",()=>{context("The index page",()=>{it('Test 1: Should have the page title "Poke Dextr"',async()=>{let e=await page.title();expect(e).to.eql("Poke Dextr")}),it('Test 2: Should have a nav bar with containing the text "Poke Dextr"',async()=>{let e=await getHTML("nav"),t=null===e?-1:e.search("Poke Dextr");expect(t).to.not.eql(-1)}),it("Test 3: Should have a main element",async()=>{let e=await page.$("main");expect(e).to.be.ok}),it('Test 4: Should have a link to index.html in nav entitled "Listing"',async()=>{let e=await page.$('nav a[href="index.html"]');expect(e).to.be.ok}),it("Test 5: Should make an ajax call which requests pokemon data on load",async()=>{let e=requests.includes("https://pokedextr.herokuapp.com/pokemon");expect(e).to.equal(!0)}).timeout(2e3),it('Test 6: Should load a list of 50 links with the class "collection-item" within an element with the id “listing”. ',async()=>{let e=await page.$$("a.collection-item");expect(e.length).to.equal(50)}),it('Test 7: Should have an element with the id "listing" and a max height of 600px',async()=>{let e=await getStyles("#listing");expect(e.maxHeight).to.equal("600px")}),it('Test 8: Should have an element with the id "listing" and be vertically scrollable',async()=>{let e=await getStyles("#listing");expect(e.overflowY).to.equal("scroll")}),it("Test 9: Should show a #bulbasaur link when the page is loaded",async()=>{const e=await(await(await page.$("#bulbasaur")).getProperty("textContent")).jsonValue();expect(e).to.equal("bulbasaur")}),it("Test 10: Should send an ajax request for pokemon details on link click",async()=>{let e=0;await page.click("a#bulbasaur"),await pause(1e3),["https://pokedextr.herokuapp.com/pokemon/bulbasaur"].forEach(t=>{requests.includes(t)&&e++}),expect(e).to.equal(1)}).timeout(2e3),it("Test 11: Should show pokemon image, id, types, weight and height in #result on link click",async()=>{await page.click("a#bulbasaur"),await pause(500),await page.waitForSelector("#result");let e={weight:"ground",id:"1",name:"bulbasaur",weight:"0.7",height:"0.7"},t=await getHTML("#result"),a={name:!1,type:!1,id:!1,weight:!1,height:!1};for(let i of Object.keys(a))a[i]=-1!=t.search(e[i]);expect(a).to.eql({name:!0,type:!0,id:!0,weight:!0,height:!0})})})}),after(async()=>{await browser.close()});